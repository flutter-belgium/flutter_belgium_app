plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')

if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

// Keystore Properties
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('keystore.properties')

if (keystorePropertiesFile.exists()) {
    keystorePropertiesFile.withReader('UTF-8') { reader ->
        keystoreProperties.load(reader)
    }
}

android {
    namespace "be.flutterbelgium.app"
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "be.flutterbelgium.app"
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
    }

    signingConfigs {
        debug {
            storeFile file("../keystore/debug.keystore")
            storePassword keystoreProperties.getProperty('keystore.debug.password')
            keyAlias keystoreProperties.getProperty('keystore.debug.alias')
            keyPassword keystoreProperties.getProperty('keystore.debug.password')
        }
        release {
            storeFile file("../keystore/release.keystore")
            storePassword keystoreProperties.getProperty('keystore.release.password')
            keyAlias keystoreProperties.getProperty('keystore.release.alias')
            keyPassword keystoreProperties.getProperty('keystore.release.password')
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions "flavors"
    productFlavors {
        dev {
            dimension "flavors"
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
        }
        alpha {
            dimension "flavors"
            applicationIdSuffix ".alpha"
            versionNameSuffix "-alpha"
        }
        beta {
            dimension "flavors"
            applicationIdSuffix ".beta"
            versionNameSuffix "-beta"
        }
        prod {
            dimension "flavors"
        }
    }
}

flutter {
    source '../..'
}

dependencies {
  implementation 'com.android.support:multidex:1.0.3'
}

apply plugin: 'com.google.gms.google-services'